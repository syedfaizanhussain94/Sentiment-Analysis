<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
		
  <display-name>Prediction</display-name>
  
	<!--
		Location of the Log4J config file, for initialization and refresh checks.
		Applied by Log4jConfigListener.
	-->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/classes/log4j.properties</param-value>
	</context-param>
	
	<!--
		- Location of the XML file that defines the root application context.
		- Applied by ContextLoaderServlet.
		- default : /WEB-INF/applicationContext.xml
	-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:context/application-context.xml
		</param-value>
	</context-param>
	
	<!--
		Key of the system property that should specify the root directory of this
		web app. Applied by WebAppRootListener or Log4jConfigListener.
	-->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>webapp.root</param-value>
	</context-param>
	
	<!--
		- Loads the root application context of this web app at startup,
		- by default from "/WEB-INF/applicationContext.xml".
		- Note that you need to fall back to Spring's ContextLoaderServlet for
		- J2EE servers that do not follow the Servlet 2.4 initialization order.
		-
		- Use WebApplicationContextUtils.getWebApplicationContext(servletContext)
		- to access it anywhere in the web application, outside of the framework.
		-
		- The root context is the parent of all servlet-specific contexts.
		- This means that its beans are automatically available in these child contexts,
		- both for getBean(name) calls and (external) bean references.
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	
	<filter>
	    <filter-name>charsetEncodingFilter</filter-name>
	    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	    <init-param>
	        <param-name>encoding</param-name>
	        <param-value>UTF-8</param-value>
	    </init-param>
	</filter>
	
	<filter-mapping>
	    <filter-name>charsetEncodingFilter</filter-name>
	    <url-pattern>/*</url-pattern>
	</filter-mapping>

	<servlet>
		<servlet-name>prediction</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<!-- map all incoming request to the Dispatcher -->
	<servlet-mapping>
		<servlet-name>prediction</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- Http PUT DELETE etc. methods -->	
    <filter>
            <filter-name>HiddenHttpMethodFilter</filter-name>
            <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
            <filter-name>HiddenHttpMethodFilter</filter-name>
            <servlet-name>prediction</servlet-name>
    </filter-mapping>
	
	<!-- error page, for resources -->
	<error-page>
        <exception-type>java.lang.Exception</exception-type>
        <location>/WEB-INF/jsp/error/uncaughtException.jsp</location>
    </error-page>
	<error-page>
        <error-code>500</error-code>
        <location>/WEB-INF/jsp/error/uncaughtException.jsp</location>
    </error-page>
    <error-page>
        <error-code>404</error-code>
        <location>/WEB-INF/jsp/error/pageNotFound.jsp</location>
    </error-page>
    
	<!-- eliminate welcome files -->
	<welcome-file-list>
		<welcome-file></welcome-file>
	</welcome-file-list>
	
</web-app>